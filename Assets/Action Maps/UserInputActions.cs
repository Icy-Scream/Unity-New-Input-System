//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Action Maps/UserInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""116a55e8-7202-419d-89c0-d90e4eeef568"",
            ""actions"": [
                {
                    ""name"": ""Change Color"",
                    ""type"": ""Button"",
                    ""id"": ""7d7ca9f0-3cb5-4cef-aac6-7ff0a447dc1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""e7031f9a-dab8-4ee3-85a5-ea1439a5a6e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DrivingState"",
                    ""type"": ""Button"",
                    ""id"": ""1801cec6-555b-46c7-b91a-c0883dba20f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c720786e-a484-4ff9-99e0-958e15675f9a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Color"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3e6449a7-7bee-40ae-ab61-3d86540b0f83"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c9a95b8e-3ab2-45f7-a7fb-030190c294da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b9ae532-b0f7-4ac7-803d-5f0df75f89c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95a5d754-82f6-4411-a758-06566199fb80"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drive"",
            ""id"": ""73e1183f-f63b-493d-acd6-e321539972ec"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""f0cbf930-e019-41f5-b82b-7bdf165264f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""246586b0-4945-4d45-b194-dddeb1714b04"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be68ac3a-93b0-4c4b-9f1e-a2f49735e648"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""453846cd-b726-4fcd-a85b-ce61e14b0bb8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c9e1645a-bef8-4969-8eab-14543608879e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a3b47e23-2861-442a-a325-2076a137b195"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""JumpMap"",
            ""id"": ""721a197a-2110-46c5-84f9-4bbf64abc1b4"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b2f14bc6-99a0-482f-972e-13c4ef23ad92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a45405b-269d-4c62-a239-e24876617fb9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ChangeColor = m_Player.FindAction("Change Color", throwIfNotFound: true);
        m_Player_Rotate = m_Player.FindAction("Rotate", throwIfNotFound: true);
        m_Player_DrivingState = m_Player.FindAction("DrivingState", throwIfNotFound: true);
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_Drive = m_Drive.FindAction("Drive", throwIfNotFound: true);
        // JumpMap
        m_JumpMap = asset.FindActionMap("JumpMap", throwIfNotFound: true);
        m_JumpMap_Jump = m_JumpMap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_ChangeColor;
    private readonly InputAction m_Player_Rotate;
    private readonly InputAction m_Player_DrivingState;
    public struct PlayerActions
    {
        private @UserInputActions m_Wrapper;
        public PlayerActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColor => m_Wrapper.m_Player_ChangeColor;
        public InputAction @Rotate => m_Wrapper.m_Player_Rotate;
        public InputAction @DrivingState => m_Wrapper.m_Player_DrivingState;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @ChangeColor.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeColor;
                @ChangeColor.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeColor;
                @ChangeColor.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeColor;
                @Rotate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @DrivingState.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrivingState;
                @DrivingState.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrivingState;
                @DrivingState.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrivingState;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColor.started += instance.OnChangeColor;
                @ChangeColor.performed += instance.OnChangeColor;
                @ChangeColor.canceled += instance.OnChangeColor;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @DrivingState.started += instance.OnDrivingState;
                @DrivingState.performed += instance.OnDrivingState;
                @DrivingState.canceled += instance.OnDrivingState;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drive
    private readonly InputActionMap m_Drive;
    private IDriveActions m_DriveActionsCallbackInterface;
    private readonly InputAction m_Drive_Drive;
    public struct DriveActions
    {
        private @UserInputActions m_Wrapper;
        public DriveActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_Drive_Drive;
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        public void SetCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterface != null)
            {
                @Drive.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnDrive;
            }
            m_Wrapper.m_DriveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
            }
        }
    }
    public DriveActions @Drive => new DriveActions(this);

    // JumpMap
    private readonly InputActionMap m_JumpMap;
    private IJumpMapActions m_JumpMapActionsCallbackInterface;
    private readonly InputAction m_JumpMap_Jump;
    public struct JumpMapActions
    {
        private @UserInputActions m_Wrapper;
        public JumpMapActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_JumpMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_JumpMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpMapActions set) { return set.Get(); }
        public void SetCallbacks(IJumpMapActions instance)
        {
            if (m_Wrapper.m_JumpMapActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_JumpMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_JumpMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_JumpMapActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_JumpMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public JumpMapActions @JumpMap => new JumpMapActions(this);
    public interface IPlayerActions
    {
        void OnChangeColor(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnDrivingState(InputAction.CallbackContext context);
    }
    public interface IDriveActions
    {
        void OnDrive(InputAction.CallbackContext context);
    }
    public interface IJumpMapActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
